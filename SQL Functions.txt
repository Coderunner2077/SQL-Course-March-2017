								PART II : SQL FUNCTIONS

SQL has many built-in functions for performing calculations on data.

SQL Aggregate functions :
SQL aggregate functions return a single value, calculated from values in a column.

Useful aggregate functions :
	- AVG() : Returns the average value
	- COUNT() : Returns the number of rows
	- FIRST() : Returns the first value
	- LAST() : Returns the last value
	- MAX() : Returns the largest value
	- MIN() : Returns the smallest value
	- SUM() : Returns the sum

------------------------------------------------------------------
SQL Scalar functions :
SQL scalar functions return a single value, based on the input value.
Useful scalar functions :
	- UCASE() : Converts a field to uppercase
	- LCASE() : Converts a field to lowercase
	- MID() : Extracts characters from a text field
	- LEN() : Returns the length of a text field
	- ROUND() : Rounds a numeric field to the number of decimals specified
	- NOW() : Returns the current system date and time
	- FORMAT() : Formats how a field is to be displayed

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL AVG() Function

The AVG() function returns the average value for a numeric column.

SQL AVG() Syntax :

SELECT AVG(column_name) FROM table_name;

Examples :

SELECT AVG(Price) FROM Products;

SELECT ProductName, Price FROM Products
WHERE Price>(SELECT AVG(Price) FROM Products);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL COUNT() Function										

The COUNT() function returns the number of rows that matches a specified criteria.

SQL COUNT(column_name) syntax :
The COUNT(column_name) function returns the number of values (NULL values will not be counted) of
the specified column ==>

SELECT COUNT(column_name) FROM table_name;

----------------------------------
SQL COUNT(*) syntax : 
The COUNT(*) function returns the number of records in the table ==>

SELECT COUNT(*) FROM table_name;

----------------------------------
SQL COUNT(DISTINCT column_name) syntax :

The COUNT(DISTINCT column_name) function returns the number of distinct values of the specified 
column ==>

SELECT COUNT(DISTINCT column_name) FROM table_name;

Note : COUNT(DISTINCT) works with Oracle and Microsoft SQL Server, but not with Microsoft Access.

EXAMPLES : 

SELECT COUNT(CustomerID) AS OrdersFromCustomersID7 FROM Orders
WHERE CustomerID=7;

--to count the total number of orders :
SELECT COUNT(*) AS NumberOfOrders FROM Orders;

--to count the number of unique customers :
SELECT COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM Orders;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL FIRST() Function

The FIRST() function returns the first value of the selected column.

SQL FIRST() Syntax : 

SELECT FIRST(column_name) AS FirstCustomer FROM table_name;

Example :

SELECT FIRST(CustomerName) FROM Customers;

Note : the FIRST() function is supported only by MS Access.
--------------------------------------------------------------------
SQL FIRST() Workaround in SQL Server, MySQL and Oracle 

SQL Server syntax :

SELECT TOP 1 column_name FROM table_name
ORDER BY column_name ASC;

Example : 

SELECT TOP 1 CustomerName FROM Customers
ORDER BY CustomerID;
----------------------------------
MySQL syntax :										

SELECT column_name FROM table_name
ORDER BY column_name ASC
LIMIT 1;

Example :

SELECT CustomerName FROM Customers ORDER BY CustomerID ASC
LIMIT 1;
----------------------------------
Oracle syntax :

SELECT colum_name FROM table_name
WHERE ROWNUM<=1
ORDER BY column_name ASC;

Example :

SELECT CustomerName FROM Customers
WHERE ROWNUM<=1
ORDER BY CustomerID ASC;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL LAST() Function

The LAST() function returns the last value of the selected column.

SQL LAST() syntax : 

SELECT LAST(column_name) FROM table_name;

Example :
SELECT LAST(CustomerName) AS LastCustomer FROM Customers;

Note : The LAST() function is supported only on MS Access.

--------------------------------------------------------------------
SQL LAST() Workaround in SQL Server, MySQL and Oracle 

SQL Server syntax :

SELECT TOP 1 column_name FROM table_name
ORDER BY column_name DESC;

Example : 

SELECT TOP 1 CustomerName FROM Customers
ORDER BY CustomerID DESC;
----------------------------------
MySQL syntax :

SELECT column_name FROM table_name
ORDER BY column_name DESC
LIMIT 1;

Example :

SELECT CustomerName FROM Customers ORDER BY CustomerID DESC
LIMIT 1;
----------------------------------
Oracle syntax :

SELECT colum_name FROM table_name
WHERE ROWNUM<=1
ORDER BY column_name DESC;

Example :

SELECT CustomerName FROM Customers
WHERE ROWNUM<=1
ORDER BY CustomerID DESC;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL MAX() Function

The MAX() function returns the largest value of the selected column.

SQL MAX() syntax :

SELECT MAX(column_name) FROM table_name;

Example :

SELECT MAX(Price) AS HighestPrice FROM Products;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL MIN() Function

The MIN() function returns the smallest value of the selected column.

SQL MIN() syntax :

SELECT MIN(column_name) FROM table_name;

Example :

SELECT MIN(Price) AS SmallestPrice FROM Products;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL SUM() Function

The SUM() function returns the total sum of a numeric column.

SQL SUM() syntax :

SELECT SUM(column_name) FROM table_name;

Example :

SELECT SUM(Quantity) AS TotaItemsOrdered FROM OrderDetails;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL GROUP BY Statement

Aggregate functions often need an added GROUP BY statement.

The GROUP BY statement is used in conjunction with the aggregate functions to group the result-set by one 
or more columns.

SQL GROUP BY syntax :

SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name;

SQL GROUP BY Examples : 
--Now I want to find the number of orders sent by each shipper. The following SQL statement counts
--as orders grouped by shippers ==>										

SELECT ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
LEFT JOIN Shippers
ON Orders.ShipperID=Shippers.ShipperID
GROUP BY ShipperName;

Peut aussi s'écrire :

SELECT ShipperName, COUNT(OrderID) AS NumberOfOrders
FROM Shippers
LEFT JOIN Orders
ON Shippers.ShipperID=Orders.ShipperID
GROUP BY ShipperName;

SQL GROUP BY on more than one column :

--We can also use the GROUP BY statement on more than one column, like this :
SELECT Shippers.ShipperName, Employees.LastName, 
COUNT(Orders.OrderID) AS NumberOfOrders
FROM ((Orders
INNER JOIN Shippers
ON Orders.ShipperID=Shippers.ShipperID)
INNER JOIN Employees
ON Orders.EmployeeID=Employees.EmployeeID)
GROUP BY ShipperName, LastName;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL HAVING Clause

The HAVING clause was added to SQL because the WHERE function could not be used with the 
aggregate functions.

SQL HAVING syntax : 

SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
HAVING aggregate_function(column_name) operator value;

SQL HAVING Examples :

--Here I'm trying to find if any of the employees has registered more than 10 orders :
SELECT Employees.LastName,
COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
INNER JOIN Employees
ON Orders.EmployeeID=Employees.EmployeeID
GROUP BY LastName
HAVING COUNT(Orders.OrderID)>10;

--checking if the employees "Davilio" or "Fuller" have registered more than 25 orders :
SELECT Emloyees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
INNER JOIN Emloyees 
ON Orders.EmployeeID=Employees.EmployeeID
WHERE LastName='Davilio' OR LastName='Fuller'
GROUP BY LastName
HAVING COUNT(Orders.OrderID)>25;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL UCASE() Function										

The UCASE() function converts the value of a field to uppercase.

SQL UCASE() syntax :

SELECT UCASE(column_name) FROM table_name;

SQL UCASE() Example :

SELECT UCASE(CustomerName) AS Customer, City
FROM Customers;

Note : SQL Server has its own function, equivalent to UCASE() ==> UPPER()
-------------------------
SQL Server Syntax  :

SELECT UPPER(column_name) FROM table_name);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL LCASE() Function

The LCASE() function converts the value of a field to lowercase.

SQL LCASE() syntax :

SELECT LCASE(column_name) FROM table_name;

SQL LCASE() Example :

SELECT LCASE(CustomerName) AS Customer, City
FROM Customers;

Note : SQL Server has its own function, equivalent to LCASE() ==> LOWER()
-------------------------
SQL Server Syntax :

SELECT LOWER(column_name) FROM table_name;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL MID() Function									

The MID() function is used to extract characters from a text field.
In other words, it's used to return a substring.

SQL MID() syntax :

SELECT MID(column_name, start, length) AS some_name FROM table_name;

Parameter	==>	Description
---------		-----------
column_name		Required. The field to extract characters from.
start			Required. Specifies the starting position (start at 1).
length			Optional. The number of characters to return. If ommited, 
			the MID() function returns the rest of the text.

Example :

SELECT MID(City,1,4) AS ShortCity FROM Customers;

-----------------------------
SQL Server's SUBSTRING()

The equivalent funcion for SQL Server is SUBSTRING() :

SELECT SUBSTRING(column_name, start, length) AS some_name FROM table_name;

-----------------------------
Oracle's SUBSTR()

The equivalent function for Oracle is SUBSTR() :

SELECT SUBSTR(column_name, start, length) AS some_name FROM table_name;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL LEN() Function										--!

The LEN() function returns the length of the value in a text field.

SQL LEN() Syntax :

SELECT LEN(column_name) FROM table_name;

Example :

SELECT CustomerName, LEN(City) AS LengthOfAddress FROM Customers;

-----------------------------
Oracle's syntax

SELECT LENGTH(column_name) FROM table_name;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL ROUND() Function										--!

The ROUND() function is used to round a numeric field to the number of decimals specified.

Note : Many database systems do rounding differently than I might expect. When rounding a number
with a fractional part to an integer, our school teachers told us to round '.1' throug '.4' DOWN
to the next lower integer, and '.4' through '.9' UP to the next higher integer. But if all the
digits 1 through 9 are equally likely, this introduces a slight bias towards infinity, since
we always round '.5' up. Many database systems have adopted the IEEE 754 standard for
arithmetic operations, according to which the default rounding behavior is "round half to even".
In this scheme, '.5' is rounded to the nearest even integer. So, both 11.5 and 12.5 would be
rounded to 12.

SQL ROUND() Syntax :

SELECT ROUND(column_name, decimals) FROM table_name;

==>	- column_name : Required. The field to round.
	- decimals : Required. Specifies the number of decimals to be returned .

Example :

SELECT ProductName, ROUND(Price,0) AS RoundedPrice 
FROM Customers;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL NOW() Function

The NOW() funcion return the current date and time.

SQL NOW() syntax :
SELECT NOW() FROM table_name();

Example :

--the following statement selects the product name, and price for today from the Products table :
SELECT ProductName, Price, NOW() AS PerDate
FROM Products;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL FORMAT() Function

The FORMAT() function is used to format how a field is to be displayed.

SQL FORMAT() syntax :

SELECT FORMAT(column_name, format) FROM talbe_name;

==>	- column_name : Required. The field to be formatted.
	- format : Required. Specifies format.

Example :

--select the product name, the price for today (formatted like YYYY-MM-DD) from Products table
SELECT ProductName, FORMAT(Now(), 'YYYY-MM-DD') AS PerDate
FROM Products;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL EXISTS

J'ai trouvé ceci dans le SQL Quick Reference du site W3Schools : 

IF EXISTS(SELECT*FROM table_name WHERE id=?)
BEGIN
--do what needs to be done
END
ELSE
BEGIN
--do what needs to be done
END
